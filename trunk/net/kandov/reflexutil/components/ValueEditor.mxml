<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	preinitialize="preinitializeHandler()" dataChange="dataChangeHandler()">
	
	<mx:Metadata>
		[Event(type="flash.events.Event", name="valueChanged")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.states.State;
			
			import net.kandov.reflexutil.assets.Images;
			import net.kandov.reflexutil.types.PropertyInfo;
			import net.kandov.reflexutil.utils.ComponentUtil;
			
			public static const VALUE_CHANGED:String = "valueChanged";
			
			private var valueDescriptor:ValueDescriptor;
			
			//--------------------------------------------------------------------------
			// interface
			//--------------------------------------------------------------------------
			
			[Bindable(event="valueChanged")]
			public function get value():Object {
				return propertyInfo.value;
			}
			
			public function set value(value:Object):void {
				try {
					propertyInfo.component[propertyInfo.name] = value;
				} catch (error:Error) {
				}
				finally {
					ComponentUtil.updateValueIfNotBindable(propertyInfo);
				}
			}
			
			//--------------------------------------------------------------------------
			// private
			//--------------------------------------------------------------------------
			
			[Bindable(event="dataChange")]
			private function get propertyInfo():PropertyInfo {
				return PropertyInfo(data);
			}
			
			//--------------------------------------------------------------------------
			// handlers
			//--------------------------------------------------------------------------
			
			private function preinitializeHandler():void {
				addEventListener(VALUE_CHANGED, valueChangedHandler, false, 0, true);
			}
			
			private function dataChangeHandler():void {
				if (propertyInfo) {
					if (propertyInfo.access == "readwrite") {
						for each (var state:State in states) {
							if (state.name == propertyInfo.type) {
								currentState = state.name;
								break;
							}
						}
					} else {
						currentState = propertyInfo.access;
					}
					
					propertyInfo.addEventListener(PropertyInfo.VALUE_CHANGED,
						propertyInfoValueChangedHandler, false, 0, true);
					
					dispatchEvent(new Event(VALUE_CHANGED));
				}
			}
			
			private function valueChangedHandler(event:Event):void {
				//TODO: add hint to show that the property value updated,
				//(maybe yellow bgcolor) and vanish it in some way...
			}
			
			private function propertyInfoValueChangedHandler(event:Event):void {
				dispatchEvent(new Event(VALUE_CHANGED));
			}
			
			private function imgRefreshClickHandler():void {
				ComponentUtil.updateValueIfNotBindable(propertyInfo);
			}
			
			private function imgDescribeClickHandler():void {
				var center:Boolean;
				if (!valueDescriptor) {
					valueDescriptor = new ValueDescriptor();
					valueDescriptor.addEventListener(CloseEvent.CLOSE, popUpCloseHandler, false, 0, true);
					valueDescriptor.data = propertyInfo;
					center = true;
				}
				
				if (!valueDescriptor.isPopUp) {
					PopUpManager.addPopUp(valueDescriptor, this);
				}
				
				if (center) {
					PopUpManager.centerPopUp(valueDescriptor);
				}
			}
			
			private function popUpCloseHandler(event:CloseEvent):void {
				var popUp:IFlexDisplayObject = IFlexDisplayObject(event.currentTarget);
				PopUpManager.removePopUp(popUp);
			}
		]]>
	</mx:Script>
	
	<mx:Style>
		.stepperSensitivityButton {
			corner-radius:0;
			border-style:none;
			font-size:8;
			padding-left:0;
			padding-right:0;
		}
	</mx:Style>
	
	<mx:states>
		<mx:State name="readonly">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:Label width="{canvasValueHolder.width}" text="{value}"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="writeonly">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:Label width="{canvasValueHolder.width}" text="[no read access]" color="#ff0000"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="boolean">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<!-- FIXME: using a checkbox and/or a combobox is buggy with datagrid's scroller -->
				<!--<mx:HBox horizontalGap="2">
					<mx:CheckBox id="chkBooleanValue" selected="{propertyInfo.value}"
						change="value = chkBooleanValue.selected"/> -->
					<mx:Label text="{value}"/>
				<!--</mx:HBox> -->
			</mx:AddChild>
		</mx:State>
		<mx:State name="number">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:HBox width="100%" horizontalGap="0">
					<mx:NumericStepper id="stpNumberValue" width="100%" value="{Number(value)}"
						minimum="-2147483648" maximum="2147483648"
						change="value = stpNumberValue.value"/>
					<mx:VBox height="100%" verticalGap="0">
						<mx:Button label="1" width="22" height="11" styleName="stepperSensitivityButton"
							click="stpNumberValue.stepSize = 1" enabled="{stpNumberValue.stepSize != 1}"
							toolTip="Set step sensitivity to 1"/>
						<mx:Button label="0.1" width="22" height="11" styleName="stepperSensitivityButton"
							click="stpNumberValue.stepSize = 0.1" enabled="{stpNumberValue.stepSize != 0.1}"
							toolTip="Set step sensitivity to 0.1"/>
					</mx:VBox>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="int">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:NumericStepper id="stpIntValue" width="100%" value="{int(value)}"
					minimum="-2147483648" maximum="2147483648"
					change="value = stpIntValue.value"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="object">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:Label width="{canvasValueHolder.width}" text="{value}"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="string">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:TextInput id="txtStringValue" width="100%" text="{value}"
					change="value = txtStringValue.text"/>
			</mx:AddChild>
		</mx:State>
		<!-- TODO: after adding styles, implement these types (determine them in ClassUtil) -->
		<!--<mx:State name="Color">
		</mx:State>
		<mx:State name="FontName">
		</mx:State>
		<mx:State name="List">
		</mx:State>-->
	</mx:states>
	
	<mx:HBox id="boxEditor" width="100%" minHeight="22" verticalAlign="middle" horizontalGap="2">
		<mx:Canvas id="canvasValueHolder" width="100%"/>
		<mx:Image id="imgBindable" source="{Images.BINDABLE}" toolTip="Bindable (refreshes automatically)"
			visible="{propertyInfo.bindable}" includeInLayout="{propertyInfo.bindable}"/>
		<mx:Image id="imgRefresh" source="{Images.REFRESH_SMALL}" toolTip="Refresh"
			buttonMode="true" click="imgRefreshClickHandler()"
			visible="{!propertyInfo.bindable &amp;&amp; propertyInfo.access != 'writeonly'}"
			includeInLayout="{!propertyInfo.bindable}"/>
		<mx:Image id="imgDescribe" source="{Images.WATCH}" toolTip="Watch"
			buttonMode="true" click="imgDescribeClickHandler()"
			visible="{propertyInfo.access != 'writeonly'}"/>
	</mx:HBox>
	
</mx:Canvas>