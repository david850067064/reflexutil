<?xml version="1.0" encoding="utf-8"?>
<!--
/*
*	Copyright 2007 Alon Kandov (kandov@gmail.com)
*	ReflexUtil <http://reflexutil.googlecode.com>
*	
*	==========================================================================
*	
*	This file is part of ReflexUtil.
*	
*	ReflexUtil is free software: you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by
*	the Free Software Foundation, either version 3 of the License, or
*	(at your option) any later version.
*	
*	ReflexUtil is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*	
*	You should have received a copy of the GNU General Public License
*	along with ReflexUtil.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	dataChange="dataChangeHandler()">
	
	<mx:Script>
		<![CDATA[
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.states.State;
			
			import net.kandov.reflexutil.assets.Images;
			import net.kandov.reflexutil.types.PropertyInfo;
			import net.kandov.reflexutil.utils.ComponentUtil;
			
			private var valueDescriptor:ValueDescriptor;
			
			//--------------------------------------------------------------------------
			// interface
			//--------------------------------------------------------------------------
			
			public function set value(value:Object):void {
				ComponentUtil.setPropertyValue(propertyInfo, value);
			}
			
			//--------------------------------------------------------------------------
			// private
			//--------------------------------------------------------------------------
			
			[Bindable(event="dataChange")]
			private function get propertyInfo():PropertyInfo {
				return PropertyInfo(data);
			}
			
			//--------------------------------------------------------------------------
			// handlers
			//--------------------------------------------------------------------------
			
			private function dataChangeHandler():void {
				if (propertyInfo) {
					currentState = "default";
					if (propertyInfo.access == "writeonly") {
						currentState = "writeonly";
					} else {
						for each (var state:State in states) {
							if (state.name == propertyInfo.type) {
								currentState = state.name;
								break;
							}
						}
					}
					
					propertyInfo.addEventListener(PropertyInfo.VALUE_CHANGED,
						propertyInfoValueChangedHandler, false, 0, true);
				}
			}
			
			private function propertyInfoValueChangedHandler(event:Event):void {
				//TODO: add hint to show that the property value updated
			}
			
			private function imgRefreshClickHandler():void {
				ComponentUtil.getPropertyValue(propertyInfo);
			}
			
			private function imgDescribeClickHandler():void {
				var center:Boolean;
				if (!valueDescriptor) {
					valueDescriptor = new ValueDescriptor();
					valueDescriptor.addEventListener(CloseEvent.CLOSE, popUpCloseHandler, false, 0, true);
					valueDescriptor.data = propertyInfo;
					center = true;
				}
				
				if (!valueDescriptor.isPopUp) {
					PopUpManager.addPopUp(valueDescriptor, this);
				}
				
				if (center) {
					PopUpManager.centerPopUp(valueDescriptor);
				}
			}
			
			private function popUpCloseHandler(event:CloseEvent):void {
				var popUp:IFlexDisplayObject = IFlexDisplayObject(event.currentTarget);
				PopUpManager.removePopUp(popUp);
			}
		]]>
	</mx:Script>
	
	<mx:Style>
		.stepperSensitivityButton {
			corner-radius:0;
			border-style:none;
			font-size:8;
			padding-left:0;
			padding-right:0;
		}
	</mx:Style>
	
	<mx:states>
		<mx:State name="default">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:Label width="{canvasValueHolder.width}" text="{propertyInfo.value}"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="writeonly">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:Label width="{canvasValueHolder.width}" text="[no read access]" color="#ff0000"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="Boolean">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:HBox horizontalGap="2">
					<mx:CheckBox id="chkBooleanValue" selected="{propertyInfo.value}"
						click="value = chkBooleanValue.selected"/>
					<mx:Label text="{propertyInfo.value}"/>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="Number">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:HBox width="100%" horizontalGap="0">
					<mx:NumericStepper id="stpNumberValue" width="100%" value="{Number(propertyInfo.value)}"
						minimum="-2147483648" maximum="2147483648"
						change="value = stpNumberValue.value"/>
					<mx:VBox height="100%" verticalGap="0">
						<mx:Button label="1" width="22" height="11" styleName="stepperSensitivityButton"
							click="stpNumberValue.stepSize = 1" enabled="{stpNumberValue.stepSize != 1}"
							toolTip="Set step sensitivity to 1"/>
						<mx:Button label="0.1" width="22" height="11" styleName="stepperSensitivityButton"
							click="stpNumberValue.stepSize = 0.1" enabled="{stpNumberValue.stepSize != 0.1}"
							toolTip="Set step sensitivity to 0.1"/>
					</mx:VBox>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="int">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:NumericStepper id="stpIntValue" width="100%" value="{int(propertyInfo.value)}"
					minimum="-2147483648" maximum="2147483648"
					change="value = stpIntValue.value"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="String">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:TextInput id="txtStringValue" width="100%" text="{propertyInfo.value}"
					change="value = txtStringValue.text"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="Enumeration">
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<!-- FIXME: for some reason, the outer scroll is affected by this component -->
				<mx:ComboBox id="cmbArrayValue" width="100%"
					dataProvider="{propertyInfo.enumeration}"
					selectedIndex="{propertyInfo.enumeration.indexOf(propertyInfo.value)}"
					change="value = cmbArrayValue.selectedItem"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="Array">
			<!-- TODO: open an editor window for the array items collection -->
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:TextInput id="txtArrayValue" width="100%" text="{propertyInfo.value}"
					focusOut="value = txtArrayValue.text"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="Color">
			<!-- TODO: open a color picker dialog -->
			<mx:AddChild relativeTo="{canvasValueHolder}" position="firstChild">
				<mx:TextInput id="txtColorValue" width="100%" text="{propertyInfo.value}"
					change="value = txtColorValue.text"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<!-- TODO: finde a better way to differentiate the styles (currently - backgroundColor) -->
	<mx:HBox id="boxEditor" width="100%" minHeight="22" verticalAlign="middle" horizontalGap="2"
		backgroundColor="{propertyInfo.isStyle ? 16777113 : 16777215}">
		<mx:Canvas id="canvasValueHolder" width="100%" enabled="{propertyInfo.access != 'readonly'}"/>
		<mx:Image id="imgBindable" source="{Images.BINDABLE}" toolTip="Bindable (refreshes automatically)"
			visible="{propertyInfo.bindable}" includeInLayout="{propertyInfo.bindable}"/>
		<mx:Image id="imgRefresh" source="{Images.REFRESH_SMALL}" toolTip="Refresh"
			buttonMode="true" click="imgRefreshClickHandler()"
			visible="{!propertyInfo.bindable &amp;&amp; propertyInfo.access != 'writeonly'}"
			includeInLayout="{!propertyInfo.bindable}"/>
		<mx:Image id="imgDescribe" source="{Images.WATCH}" toolTip="Watch"
			buttonMode="true" click="imgDescribeClickHandler()"
			visible="{propertyInfo.access != 'writeonly'}"/>
	</mx:HBox>
	
</mx:Canvas>